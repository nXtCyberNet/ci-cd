name: 'Build and Deploy to Cloud Run'

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE: ${{ secrets.GCP_SERVICE }}
  REGION_REGISTORY: ${{ secrets.GCP_REGISTRY }}

jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'

      - name: 'Set up Python'
        uses: 'actions/setup-python@v2'
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Install Python dependencies'
        run: |
          pip install -r requirements.txt

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS_JSON }}'

      - name: 'Docker Auth'
        uses: 'docker/login-action@v3'
        with:
          username: '_json_key'
          password: '${{ secrets.GCP_CREDENTIALS_JSON }}'
          registry: '${{ env.REGION_REGISTORY }}-docker.pkg.dev'

      - name: 'Build and Push Container'
        run: |-
          gcloud auth configure-docker '${{ env.REGION_REGISTORY }}-docker.pkg.dev'
          DOCKER_TAG="${{ env.REGION_REGISTORY }}-docker.pkg.dev/${{ env.PROJECT_ID }}/ci-cd/test:${{ github.sha }}"
          docker build --tag "${DOCKER_TAG}" .
          docker push "${DOCKER_TAG}"

      - name: 'Test Container'
        run: |-
          DOCKER_TAG="${{ env.REGION_REGISTORY }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}"
          docker run -p 5000:5000 "${DOCKER_TAG}"
          python -m unittest test.py

      - name: 'Deploy to Cloud Run'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: '${{ env.SERVICE }}'
          region: '${{ env.REGION }}'
          image: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}'

      - name: 'Show output'
        run: echo ${{ steps.deploy.outputs.url }}
